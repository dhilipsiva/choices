{"name":"Orm-choices","tagline":"A helpful decorator for choice fields (Django choices or SQLAlchemy ChoiceType). Do choices the pythonic way.","body":"# ORM Choices\r\nA helpful decorator for choice fields (Django choices or SQLAlchemy ChoiceType). Do choices the pythonic way.\r\n\r\n## Why create ORM Choices?\r\n\r\nI got sick and tired of using `choice` fields in Django ORM and SQLAlchemy. [Look here for a context](https://github.com/pythonindia/junction/issues/302)\r\n\r\nFor example:\r\n\r\n```python\r\n# Conference Application Choice Fields\r\nCONFERENCE_STATUS_ACCEPTING_CFP = \"Accepting Proposals\"\r\nCONFERENCE_STATUS_CLOSED_CFP = \"Proposal submission closed\"\r\nCONFERENCE_STATUS_ACCEPTING_VOTES = \"Accepting Votes\"\r\nCONFERENCE_STATUS_SCHEDULE_PUBLISHED = \"Schedule Published\"\r\n\r\nCONFERENCE_STATUS_LIST = ((1, CONFERENCE_STATUS_ACCEPTING_CFP),\r\n                          (2, CONFERENCE_STATUS_CLOSED_CFP),\r\n                          (3, CONFERENCE_STATUS_ACCEPTING_VOTES),\r\n                          (4, CONFERENCE_STATUS_SCHEDULE_PUBLISHED),\r\n                          )\r\n\r\n# Using it in a model:\r\n\r\nclass Conference(Model):\r\n    status = models.PositiveSmallIntegerField(\r\n\t\tdefault=1, choices=CONFERENCE_STATUS_LIST)\r\n```\r\n\r\nI have no Idea what 1 is (I mean its not really obvious that it means `CONFERENCE_STATUS_ACCEPTING_CFP` when `CONFERENCE_STATUS_LIST` is declared in some other file).\r\n\r\n\r\nI needed a clean and DRY way of making use of Choice Fields.\r\n\r\nIntroducing `choices`:\r\n\r\n\r\n```python\r\n\r\nfrom orm_choices import choices\r\n\r\n@choices\r\nclass ConferenceStatus:\r\n\tclass Meta:\r\n    \tACCEPTING_CFP = [1, \"Accepting Proposals\"]\r\n    \tCLOSED_CFP = [2, \"Proposal submission closed\"]\r\n    \tACCEPTING_VOTES = [3, \"Accepting Votes\"]\r\n    \tSCHEDULE_PUBLISHED = [4, \"Schedule Published\"]\r\n\r\n# Using it in a model:\r\n\r\nclass Conference(Model):\r\n    status = models.PositiveSmallIntegerField(\r\n\t\tdefault=ConferenceStatus.ACCEPTING_CFP,\r\n\t\tchoices=ConferenceStatus.CHOICES)\r\n```\r\n\r\nWhat did just happen? Crazy (not really). I know, right! Declare all your variables in `Meta` class (within `ConferenceStatus`). And apply the `orm_choices` decorator to `ConferenceStatus` class. And boom! Your `ConferenceStatus` now has these attributes:\r\n\r\n```python\r\nConferenceStatus.ACCEPTING_CFP  # This will return `1`\r\nConferenceStatus.ACCEPTING_VOTES  # This will return `2`\r\n\r\n# And so on...\r\n```\r\nAnd it will add a new `CHOICES` attribute too.\r\n\r\n```\r\nprint(ConferenceStatus.CHOICES)\r\n# Will Print\r\n((1, \"Accepting Proposals\"), (2, \"Proposal submission closed\"), (3, \"Accepting Votes\"), (4, \"Schedule Published\"))\r\n```\r\n\r\nClean and DRY!\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}